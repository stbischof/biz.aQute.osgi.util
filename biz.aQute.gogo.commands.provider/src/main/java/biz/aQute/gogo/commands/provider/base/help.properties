help.description \
    The help command provides help information about the different \
    Gogo commands that are currently registered. Gogo commands are grouped by scope. You can therefore ask for all registered scopes,\
    which will list each scope and all its commands.\n\
    A command can have multiple implementation, depending on its parameters. Each command \
    will be listed separately when you ask for the help of a command.\n\
    The syntax for the SYNOPSIS is as follows: \n\
    \n\
    \t1[ names name ':' type ] default - description\n\
    \t1parameter ':' type - description\n\
    
help.title \
    Display scopes and commands for which help is available
        
 

new.title       Create a new object from a class or class name

new.description \
    The `new` function creates a new instance based on a class or class name. It is possible \
    to give arguments to the constructor. \n\
    If a class name is given, it is loaded through the class loader of the aQute command bundle. \
    This bundle dynamically imports `*`, it should therefore be possible to load any exported \
    class. \n\
    The given arguments are first matched by their actual type. If no constructor is found \
    using these actual types, an attempt is made to convert the arguments. In that case the \
    first matching constructor is taken.
      
    
new.see         loadclass
new.example     new Date 1
    

# ------------------------------------------------------------------------------------------

tac.title       Copy stdin to a given file

tac.description: \
    Command that makes the redirection of stdout superfluous. It was intended to replace the \
    >file redirection. Instead of creating a new mechanism, `tac` leverages the piping of Gogo. \
    It copies the input to a file. Therefore the generator of the content can be placed \
    before the pipe and then tac will copy the output of that previous process to a file.\n\
    
tac.example: \
         echo 1 2 3 | tac file.txt 
    
tac.see         cat

# ------------------------------------------------------------------------------------------

vars.title       Show variables

vars.description \
    Gogo maintains variables per sessions. These variables are real objects, not just \
    strings. Variables can be set using the `foo=3` syntax. They can be referred to by \
    the $ syntax, e.g. `$foo`  


# ------------------------------------------------------------------------------------------

cat.title       Copy one or more files to stdout 
cat.description \
    Takes a file and copies it to the output. Numbers options are provided to number the lines, \
    convert to hex, print invisible characters, etc. If no file is given, it will copy from \
    stdin.
     
cat.example     cat file.txt
cat.see         tac

# ------------------------------------------------------------------------------------------

imports.description \
    The loadclass function (and implicitly functions like new) load a class.The general loadclass \
    function will load from all exported classes. If a simple name is specified for the class, \
    loadclass will prefix it with all the imports. \n\
    If not imports are specified, this function will return the list of imports

imports.example imports org.osgi.framework
imports.see     loadclass

# ------------------------------------------------------------------------------------------

loadclass.title         Load an exported class or any class from a given bundle
loadclass.description   \
    The loadclass command provides a way to get access to a class. It can load a class from \
    the exported packages of any bundle or it can load a class from a specific bundle. \n\
    If a simple name is specifed (String instead of java.lang.String) the class is tried in \
    each of the packages specified with the imports command. The packages `java.lang`, `java.net`, \
    and `java.io` are already imported.
loadclass.see           imports
loadclass.example       loadclass 6  aQute.lib.strings.Strings

    
    
loadclass.see           addcommand, imports, new

# ------------------------------------------------------------------------------------------

echo.title              Print out arguments
echo.description        Command to create formatted output from a set of arguments
echo.example            echo -s foo $bar
    
# ------------------------------------------------------------------------------------------

grep.description \
    The grep command can search through a set of files for a (non) matching glob \
    expression. The output will show matching lines. These can be prefixed with the \
    relative file name and line number if so desired.  
grep.see                files
             
# ------------------------------------------------------------------------------------------
             
each.description  \
    Synonym for `map`. Iterates over a list and maps it to a new value, returns another list. \
    Inside the closure you can use $it as the current element.

each.see        filter
each.example    each (bundles) { $it location }

# ------------------------------------------------------------------------------------------

filter.description \
    Filter elements from a list. For each element in the given list, the filter function is called. \
    If it returns a 'true' value, it is passed, else it is filtered out.
filter.example      filter (bundles) { ($it location) startswith reference: }
filter.see          each

# ------------------------------------------------------------------------------------------

if.description \
    The classic `if` instruction. The if command takes a _condition_, `true` value, and an \
    optional `false` value. If any of the condition or values is a closure, it will be evaluated \
    before returned.
if.example      if ( lt ((bundles) length) 5) YES NO
    
    